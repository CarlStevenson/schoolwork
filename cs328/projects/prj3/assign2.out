Username:  stevenc
Date:      Thu Nov 6 10:25:21 EST 2014
 
***making assign9 ***
g++ assign2.cpp shortest.cpp -o assign2
--- Running ---
 

Shortest Path
This program takes a user defined adjacency matrix, stores it,
and allows the user to interact with it via menu in order to 
Perform Floyd's and Dijkstra's algorithm on it.

Please enter the number of vertices: 
You chose 5 vertices.
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 2
Enter weight: 
You entered weight = 1
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 4
Enter weight: 
You entered weight = 1
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 5
Enter weight: 
You entered weight = 5
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 2
Enter node 2: 
You entered node 3
Enter weight: 
You entered weight = 3
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 2
Enter node 2: 
You entered node 4
Enter weight: 
You entered weight = 2
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 2
Enter node 2: 
You entered node 1
Enter weight: 
You entered weight = 9
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 3
Enter node 2: 
You entered node 4
Enter weight: 
You entered weight = 4
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 4
Enter node 2: 
You entered node 3
Enter weight: 
You entered weight = 2
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 4
Enter node 2: 
You entered node 5
Enter weight: 
You entered weight = 3
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 5
Enter node 2: 
You entered node 1
Enter weight: 
You entered weight = 3
Do you have an edge to enter? (Y/N): 
The adjacency matrix:
      0|      1|1000000|      1|      5|
      9|      0|      3|      2|1000000|
1000000|1000000|      0|      4|1000000|
1000000|1000000|      2|      0|      3|
      3|1000000|1000000|1000000|      0|


Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 2.

D: 
  0|  1|  3|  1|  4|
  8|  0|  3|  2|  5|
 10| 11|  0|  4|  7|
  6|  7|  2|  0|  3|
  3|  4|  6|  4|  0|

P: 
  0|  0|  4|  0|  4|
  5|  0|  0|  0|  4|
  5|  5|  0|  0|  4|
  5|  5|  0|  0|  0|
  0|  1|  4|  1|  0|
Printing Paths:
Calling path 1 1
Calling path 1 2
Calling path 1 3
v4
Calling path 1 4
Calling path 1 5
v4
Calling path 2 1
v4
v5
Calling path 2 2
Calling path 2 3
Calling path 2 4
Calling path 2 5
v4
Calling path 3 1
v4
v5
Calling path 3 2
v4
v5
v1
Calling path 3 3
Calling path 3 4
Calling path 3 5
v4
Calling path 4 1
v5
Calling path 4 2
v5
v1
Calling path 4 3
Calling path 4 4
Calling path 4 5
Calling path 5 1
Calling path 5 2
v1
Calling path 5 3
v1
v4
Calling path 5 4
v1
Calling path 5 5

Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 1.
Choose the vertex to start with: 
You chose 1
Calculating shortest path from 1 to all other vertices.
Starting at Vertex 1
Edges:
V4 V5
V4 V3
V1 V4
V1 V2
Touch:
2 1
3 4
4 1
5 4

Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 3.
Exiting now.
--- Running again ---
 

Shortest Path
This program takes a user defined adjacency matrix, stores it,
and allows the user to interact with it via menu in order to 
Perform Floyd's and Dijkstra's algorithm on it.

Please enter the number of vertices: 
You chose 3 vertices.
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 2
Enter weight: 
You entered weight = 8
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 3
Enter weight: 
You entered weight = 5
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 2
Enter node 2: 
You entered node 1
Enter weight: 
You entered weight = 3
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 3
Enter node 2: 
You entered node 2
Enter weight: 
You entered weight = 2
Do you have an edge to enter? (Y/N): 
The adjacency matrix:
      0|      8|      5|
      3|      0|1000000|
1000000|      2|      0|


Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 2.

D: 
  0|  7|  5|
  3|  0|  8|
  5|  2|  0|

P: 
  0|  3|  0|
  0|  0|  1|
  2|  0|  0|
Printing Paths:
Calling path 1 1
Calling path 1 2
v3
Calling path 1 3
Calling path 2 1
Calling path 2 2
Calling path 2 3
v1
Calling path 3 1
v2
Calling path 3 2
Calling path 3 3

Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 1.
Choose the vertex to start with: 
You chose 1
Calculating shortest path from 1 to all other vertices.
Starting at Vertex 1
Edges:
V3 V2
V1 V3
Touch:
2 3
3 1

Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 3.
Exiting now.
--- Running again---
 

Shortest Path
This program takes a user defined adjacency matrix, stores it,
and allows the user to interact with it via menu in order to 
Perform Floyd's and Dijkstra's algorithm on it.

Please enter the number of vertices: 
You chose 5 vertices.
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 2
Enter weight: 
You entered weight = 7
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 3
Enter weight: 
You entered weight = 4
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 4
Enter weight: 
You entered weight = 6
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 5
Enter weight: 
You entered weight = 1
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 3
Enter node 2: 
You entered node 2
Enter weight: 
You entered weight = 2
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 3
Enter node 2: 
You entered node 4
Enter weight: 
You entered weight = 5
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 4
Enter node 2: 
You entered node 2
Enter weight: 
You entered weight = 3
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 5
Enter node 2: 
You entered node 4
Enter weight: 
You entered weight = 1
Do you have an edge to enter? (Y/N): 
The adjacency matrix:
      0|      7|      4|      6|      1|
1000000|      0|1000000|1000000|1000000|
1000000|      2|      0|      5|1000000|
1000000|      3|1000000|      0|1000000|
1000000|1000000|1000000|      1|      0|


Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 1.
Choose the vertex to start with: 
You chose 1
Calculating shortest path from 1 to all other vertices.
Starting at Vertex 1
Edges:
V4 V2
V1 V3
V5 V4
V1 V5
Touch:
2 4
3 1
4 5
5 1

Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 1.
Choose the vertex to start with: 
You chose 4
Calculating shortest path from 4 to all other vertices.
Starting at Vertex 4
Edges:
V2 V3
V2 V1
V4 V2
V4 V2
Touch:
5 2
1 2
2 4
3 2

Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 1.
Choose the vertex to start with: 
You chose 5
Calculating shortest path from 5 to all other vertices.
Starting at Vertex 5
Edges:
V2 V1
V4 V2
V4 V2
V5 V4
Touch:
1 2
2 4
3 2
4 5

Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 1.
Choose the vertex to start with: 
You chose 3
Calculating shortest path from 3 to all other vertices.
Starting at Vertex 3
Edges:
V4 V1
V3 V4
V3 V4
V3 V2
Touch:
4 3
5 4
1 4
2 3

Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 3.
Exiting now.
--- Running again---
 

Shortest Path
This program takes a user defined adjacency matrix, stores it,
and allows the user to interact with it via menu in order to 
Perform Floyd's and Dijkstra's algorithm on it.

Please enter the number of vertices: 
You chose 4 vertices.
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 2
Enter weight: 
You entered weight = 8
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 1
Enter node 2: 
You entered node 3
Enter weight: 
You entered weight = 1
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 2
Enter node 2: 
You entered node 3
Enter weight: 
You entered weight = 3
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 3
Enter node 2: 
You entered node 2
Enter weight: 
You entered weight = 2
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 3
Enter node 2: 
You entered node 4
Enter weight: 
You entered weight = 1
Do you have an edge to enter? (Y/N): 
Enter node 1: 
You entered node 4
Enter node 2: 
You entered node 2
Enter weight: 
You entered weight = 3
Do you have an edge to enter? (Y/N): 
The adjacency matrix:
      0|      8|      1|1000000|
1000000|      0|      3|1000000|
1000000|      2|      0|      1|
1000000|      3|1000000|      0|


Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 1.
Choose the vertex to start with: 
You chose 1
Calculating shortest path from 1 to all other vertices.
Starting at Vertex 1
Edges:
V3 V2
V3 V4
V1 V3
Touch:
2 3
3 1
4 3

Please choose a menu item:
	1. Dijkstra's shortest path
	2. Floyd's shortest path
	3. Exit

You chose 3.
Exiting now.
 
